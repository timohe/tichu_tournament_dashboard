{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { HttpClient } from '@angular/common/http';\nimport { SERVER_URL } from '../../environments/environment';\nimport { throwError } from 'rxjs';\nimport { ToastService } from '../helperServices/toast.service';\nimport { TranslateService } from '@ngx-translate/core';\nimport { AlertController } from '@ionic/angular';\nimport { catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ionic/angular\";\nimport * as i2 from \"@angular/common/http\";\nimport * as i3 from \"../helperServices/toast.service\";\nimport * as i4 from \"@ngx-translate/core\";\nexport let FriendRequestService = /*#__PURE__*/(() => {\n  class FriendRequestService {\n    constructor(alertController, httpClient, toastService, translator) {\n      this.alertController = alertController;\n      this.httpClient = httpClient;\n      this.toastService = toastService;\n      this.translator = translator;\n    }\n\n    showFriendRequestIfPresent() {\n      return __awaiter(this, void 0, void 0, function* () {\n        this.APIgetFriendlistRequests().subscribe(friendReqs => {\n          friendReqs.forEach(req => {\n            this.presentFriendRequest(req);\n          });\n        });\n      });\n    }\n\n    presentFriendRequest(friendRequest) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const alert = yield this.alertController.create({\n          cssClass: 'my-custom-class',\n          header: this.translator.instant('general.friendrequest_received_title'),\n          message: this.translator.instant('general.friendrequest_received_message', {\n            name: friendRequest.inviterName\n          }),\n          buttons: [{\n            text: this.translator.instant('general.friendrequest_received_no'),\n            role: 'cancel',\n            cssClass: 'secondary',\n            handler: () => {\n              console.log('Canceled');\n              this.APIdeleteFriendlistRequests(friendRequest._id).subscribe(response => {// this.toastService.presentToast(friendRequest.inviterName + ' ' + this.translator.instant('general.friendrequest_received_toast_confirmation'));\n              });\n              console.log(`This is the data`);\n            }\n          }, {\n            text: this.translator.instant('general.friendrequest_received_yes'),\n            handler: () => {\n              this.APIaddToWhitelistAndDeleteRequest(friendRequest.inviterId, friendRequest._id).subscribe(response => {\n                this.toastService.presentToast(friendRequest.inviterName + ' ' + this.translator.instant('general.friendrequest_received_toast_confirmation'));\n              });\n            }\n          }]\n        });\n        yield alert.present();\n      });\n    }\n\n    APIgetFriendlistRequests() {\n      return this.httpClient.get(`${SERVER_URL}/users/getFriendRequests`).pipe(catchError(err => {\n        this.toastService.presentToast();\n        return throwError(err);\n      }));\n    }\n\n    APIdeleteFriendlistRequests(requestId) {\n      return this.httpClient.delete(`${SERVER_URL}/users/deleteFriendRequest/${requestId}`).pipe(catchError(err => {\n        this.toastService.presentToast();\n        return throwError(err);\n      }));\n    }\n\n    APIaddToWhitelistAndDeleteRequest(idToAdd, friendRequestId) {\n      return this.httpClient.post(`${SERVER_URL}/users/addToWhitelistAndDeleteRequest`, {\n        id: idToAdd,\n        friendRequestId: friendRequestId\n      }).pipe(catchError(err => {\n        if (err.error.userAlreadyOnWhiteListError) {\n          this.toastService.presentToast(this.translator.instant('profile.toast_userAlreadyOnWhiteListError'));\n        } else {\n          this.toastService.presentToast();\n        }\n\n        return throwError(err);\n      }));\n    }\n\n  }\n\n  FriendRequestService.ɵfac = function FriendRequestService_Factory(t) {\n    return new (t || FriendRequestService)(i0.ɵɵinject(i1.AlertController), i0.ɵɵinject(i2.HttpClient), i0.ɵɵinject(i3.ToastService), i0.ɵɵinject(i4.TranslateService));\n  };\n\n  FriendRequestService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: FriendRequestService,\n    factory: FriendRequestService.ɵfac,\n    providedIn: 'root'\n  });\n  return FriendRequestService;\n})();","map":null,"metadata":{},"sourceType":"module"}