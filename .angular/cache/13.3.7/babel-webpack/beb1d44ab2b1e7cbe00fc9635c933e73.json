{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { NgZone } from '@angular/core';\nimport { Platform } from '@ionic/angular';\nimport { Router } from '@angular/router';\nimport { Storage } from '@ionic/storage';\nimport { AlertController } from '@ionic/angular';\nimport { TranslateService } from '@ngx-translate/core';\nimport { Style } from '@capacitor/status-bar';\nimport { SERVER_URL, TOURNAMENT_WEBSITE_MODE } from '../environments/environment';\nimport { HttpClient } from '@angular/common/http';\nimport { catchError } from 'rxjs/operators';\nimport { throwError } from 'rxjs';\nimport { FirebaseAnalytics } from '@capacitor-community/firebase-analytics';\nimport { Network } from '@capacitor/network';\nimport { SplashScreen } from '@capacitor/splash-screen';\nimport { Device } from '@capacitor/device';\nimport { App } from '@capacitor/app';\nimport { StatusBar } from '@capacitor/status-bar';\nimport { ToastService } from './helperServices/toast.service';\nimport { Capacitor } from '@capacitor/core';\nimport { FriendRequestService } from './helperServices/friend-request.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ionic/angular\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@ionic/storage\";\nimport * as i4 from \"@ngx-translate/core\";\nimport * as i5 from \"@angular/common/http\";\nimport * as i6 from \"./helperServices/toast.service\";\nimport * as i7 from \"./helperServices/friend-request.service\";\nexport let AppComponent = /*#__PURE__*/(() => {\n  class AppComponent {\n    // pincode: string = '';\n    constructor(platform, router, storage, alertController, translate, httpClient, toastService, friendReqService, zone) {\n      this.platform = platform;\n      this.router = router;\n      this.storage = storage;\n      this.alertController = alertController;\n      this.translate = translate;\n      this.httpClient = httpClient;\n      this.toastService = toastService;\n      this.friendReqService = friendReqService;\n      this.zone = zone;\n      this.handler = Network.addListener('networkStatusChange', status => {\n        if (status.connected === false) {\n          this.presentNoInternetAlert();\n        }\n      });\n      this.initializeApp();\n    }\n\n    presentNoInternetAlert() {\n      return __awaiter(this, void 0, void 0, function* () {\n        const alert = yield this.alertController.create({\n          header: this.translate.instant('general.offline_title'),\n          message: this.translate.instant('general.offline_content'),\n          buttons: ['OK']\n        });\n        yield alert.present();\n      });\n    }\n\n    presentStatusMessage(title, statusMessage) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const alert = yield this.alertController.create({\n          header: title,\n          message: statusMessage,\n          buttons: ['OK']\n        });\n        yield alert.present();\n      });\n    }\n\n    checkForStatusMessage() {\n      return __awaiter(this, void 0, void 0, function* () {\n        const info = yield App.getInfo();\n        const dvc = yield Device.getInfo();\n        this.storage.set('APP_VERSION', info.version);\n        this.storage.set('PLATFORM', dvc.operatingSystem);\n        this.storage.set('APP_BUILD', info.build);\n        this.APIgetStatusMessage().subscribe(response => {\n          if (!response.active) {\n            return;\n          }\n\n          if (response.active && !response.excludedBuilds.includes(info.version)) {\n            this.presentStatusMessage(response.title, response.message);\n          }\n        });\n      });\n    }\n\n    APIgetStatusMessage() {\n      return this.httpClient.get(`${SERVER_URL}/general/statusMessage`).pipe(catchError(err => {\n        return throwError(err);\n      }));\n    }\n\n    setLanguage() {\n      return __awaiter(this, void 0, void 0, function* () {\n        this.translate.setDefaultLang('en');\n        const lang = yield Device.getLanguageCode();\n\n        if (lang.value === 'de') {\n          this.translate.use('de');\n        } else if (lang.value === 'en') {\n          this.translate.use('en');\n        } else {\n          this.translate.use('en');\n        }\n      });\n    }\n\n    setStatusBarForiOS() {\n      return __awaiter(this, void 0, void 0, function* () {\n        if (Capacitor.isPluginAvailable('StatusBar')) {\n          StatusBar.setStyle({\n            style: Style.Dark\n          });\n        }\n      });\n    }\n\n    initFirebaseAnalytics() {\n      return __awaiter(this, void 0, void 0, function* () {\n        // This is for the web implementation\n        // See https://github.com/capacitor-community/firebase-analytics\n        FirebaseAnalytics.initializeFirebase({\n          databaseURL: '...',\n          apiKey: 'AIzaSyBD2HeZv6y-WHesi2xPDR4lJ52BQsqdiKQ',\n          authDomain: 'tichu-stats.firebaseapp.com',\n          projectId: 'tichu-stats',\n          storageBucket: 'tichu-stats.appspot.com',\n          messagingSenderId: '1099165342061',\n          appId: '1:1099165342061:web:1cba9de4b2b4779b1c2264',\n          measurementId: 'G-H3VZT74VVD'\n        });\n      });\n    }\n\n    APIautoCreateUser() {\n      return this.httpClient.get(`${SERVER_URL}/users/autocreate`).pipe(catchError(err => {\n        this.toastService.presentToast();\n        return throwError(err);\n      }));\n    }\n\n    autoCreateUser() {\n      return __awaiter(this, void 0, void 0, function* () {\n        this.APIautoCreateUser().subscribe(res => __awaiter(this, void 0, void 0, function* () {\n          yield this.storage.set('ACCESS_TOKEN', res.user.access_token);\n          yield this.storage.set('USER_ID', res.user.id);\n          yield this.storage.set('USER_EMAIL', res.user.email);\n          yield this.storage.set('EXPIRES_IN', res.user.expires_in);\n          yield this.storage.set('HAS_SEEN_INTRO', false);\n        }));\n      });\n    }\n\n    initializeApp() {\n      App.addListener('appUrlOpen', event => {\n        this.zone.run(() => {\n          // Example url: https://tichustats.com/pin-login?code=1234\n          const slug = event.url.split(\".com\").pop();\n\n          if (slug.includes('pin-login?code=')) {\n            this.storage.set('PIN_CODE', slug.split(\"pin-login?code=\").pop());\n          }\n        });\n      });\n      this.setLanguage();\n      this.initFirebaseAnalytics();\n      this.platform.ready().then(() => {\n        this.checkForStatusMessage();\n        this.setStatusBarForiOS();\n\n        if (TOURNAMENT_WEBSITE_MODE) {// don't forward in this case, use what the user inputted to jump directly to the tournament page\n          // console.log('route', this.activatedRoute.snapshot.queryParams);\n          // use like this http://localhost:8100/tournament-dashboard?tournamentName=test;\n        } else {\n          this.storage.get('ACCESS_TOKEN').then(data => __awaiter(this, void 0, void 0, function* () {\n            if (data) {\n              this.friendReqService.showFriendRequestIfPresent();\n              this.router.navigateByUrl('/tabs/welcome');\n\n              if (Capacitor.isPluginAvailable('SplashScreen')) {\n                setTimeout(() => SplashScreen.hide(), 500);\n              }\n            } else {\n              // console.log(`Forwarding to /login${this.pincode}`);\n              this.router.navigateByUrl(`/login`);\n\n              if (Capacitor.isPluginAvailable('SplashScreen')) {\n                setTimeout(() => SplashScreen.hide(), 500);\n              }\n            }\n          }), error => console.error(error));\n        }\n      });\n    }\n\n  }\n\n  AppComponent.ɵfac = function AppComponent_Factory(t) {\n    return new (t || AppComponent)(i0.ɵɵdirectiveInject(i1.Platform), i0.ɵɵdirectiveInject(i2.Router), i0.ɵɵdirectiveInject(i3.Storage), i0.ɵɵdirectiveInject(i1.AlertController), i0.ɵɵdirectiveInject(i4.TranslateService), i0.ɵɵdirectiveInject(i5.HttpClient), i0.ɵɵdirectiveInject(i6.ToastService), i0.ɵɵdirectiveInject(i7.FriendRequestService), i0.ɵɵdirectiveInject(i0.NgZone));\n  };\n\n  AppComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: AppComponent,\n    selectors: [[\"app-root\"]],\n    decls: 2,\n    vars: 0,\n    template: function AppComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"ion-app\");\n        i0.ɵɵelement(1, \"ion-router-outlet\");\n        i0.ɵɵelementEnd();\n      }\n    },\n    directives: [i1.IonApp, i1.IonRouterOutlet],\n    styles: [\"\"]\n  });\n  return AppComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}