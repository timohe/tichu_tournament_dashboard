{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { Observable, from } from 'rxjs';\nimport { HttpHeaders } from '@angular/common/http';\nimport { Storage } from '@ionic/storage';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ionic/storage\";\nexport let HttpInterceptorService = /*#__PURE__*/(() => {\n  class HttpInterceptorService {\n    constructor(storage) {\n      this.storage = storage;\n    }\n\n    intercept(request, next) {\n      return from(this.handleAccess(request, next));\n    }\n\n    handleAccess(request, next) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const token = yield this.storage.get('ACCESS_TOKEN');\n        let changedRequest = request; // HttpHeader object immutable - copy values\n\n        const headerSettings = {};\n\n        for (const key of request.headers.keys()) {\n          headerSettings[key] = request.headers.getAll(key);\n        }\n\n        if (token) {\n          // eslint-disable-next-line @typescript-eslint/dot-notation\n          headerSettings['Authorization'] = token;\n        }\n\n        headerSettings['Content-Type'] = 'application/json';\n        const newHeader = new HttpHeaders(headerSettings);\n        changedRequest = request.clone({\n          headers: newHeader\n        });\n        return next.handle(changedRequest).toPromise();\n      });\n    }\n\n  }\n\n  HttpInterceptorService.ɵfac = function HttpInterceptorService_Factory(t) {\n    return new (t || HttpInterceptorService)(i0.ɵɵinject(i1.Storage));\n  };\n\n  HttpInterceptorService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: HttpInterceptorService,\n    factory: HttpInterceptorService.ɵfac,\n    providedIn: 'root'\n  });\n  return HttpInterceptorService;\n})();","map":null,"metadata":{},"sourceType":"module"}